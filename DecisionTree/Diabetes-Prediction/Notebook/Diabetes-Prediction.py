# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cJ5krUmldixm61fFAX5pO6iCSq_5LP8D

# Import necessary libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn import metrics
from sklearn.metrics import confusion_matrix, classification_report
from six import StringIO
import pydotplus
from IPython.display import Image

"""# Load the dataset"""

df = pd.read_csv('diabetess.csv')

print("First 5 rows of dataset:")
df.head()

"""# Feature and target separation with train test split"""

feature_cols = ['Pregnancies','Glucose','BloodPressure','SkinThickness', 'Insulin','BMI','DiabetesPedigreeFunction','Age']
X = df[feature_cols]
Y = df['Outcome']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

"""# Mode training and prediction"""

# Create Decision Tree classifier and train it
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, Y_train)

# Make predictions
Y_pred = clf.predict(X_test)

"""# Evaluation"""

# Evaluate the model
accuracy = metrics.accuracy_score(Y_test, Y_pred)
print("\nModel Accuracy: {:.2f}%".format(accuracy * 100))

# Print classification report and confusion matrix
print("\nClassification Report:")
print(classification_report(Y_test, Y_pred))

print("Confusion Matrix:")
print(confusion_matrix(Y_test, Y_pred))

# Visualize confusion matrix
plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(Y_test, Y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.tight_layout()
plt.savefig("confusion_matrix.png")
plt.show()

"""# Decision Tree Image"""

# Required imports
from sklearn.tree import export_graphviz
from six import StringIO
import pydotplus
from IPython.display import Image

# Export the decision tree to DOT format
dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True,
                feature_names=feature_cols,
                class_names=['0', '1'])

# Generate the graph from DOT data
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())

# Save the graph as a PNG image
graph.write_png("diabetes_tree.png")

# Display the image inline (only works in Jupyter)
Image(graph.create_png())

# Confirmation message
print("Decision tree image saved as 'diabetes_tree.png'")