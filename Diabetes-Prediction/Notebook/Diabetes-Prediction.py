# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cJ5krUmldixm61fFAX5pO6iCSq_5LP8D

# Import necessary libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn import metrics
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from six import StringIO
import pydotplus
from IPython.display import Image

"""# Load the dataset"""

df = pd.read_csv('diabetess.csv')

print("First 5 rows of dataset:")
df.head()

"""# Feature and target separation with train test split"""

feature_cols = ['Pregnancies','Glucose','BloodPressure','SkinThickness', 'Insulin','BMI','DiabetesPedigreeFunction','Age']
X = df[feature_cols]
Y = df['Outcome']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

"""# Mode training and prediction"""

param_grid = {
    'criterion': ['gini', 'entropy'],
    'max_depth': [3, 5, 7, 10, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Initialize classifier
clf = DecisionTreeClassifier(random_state=42)

# Grid search
grid_search = GridSearchCV(estimator=clf, param_grid=param_grid,
                           cv=5, n_jobs=-1, scoring='accuracy', verbose=1)

# Fit
grid_search.fit(X_train, Y_train)

# Best estimator
best_clf = grid_search.best_estimator_

# Predictions
y_pred = best_clf.predict(X_test)

"""# Evaluation"""

# Accuracy
print("Best Parameters:", grid_search.best_params_)
print("Accuracy:", accuracy_score(Y_test, Y_pred))
print("Classification Report:\n", classification_report(Y_test, Y_pred))

"""# Decision Tree Image"""

# Visualize the best tree
plt.figure(figsize=(12, 8))
plot_tree(best_clf, filled=True, feature_names=feature_cols, class_names=['0', '1'])
plt.title("Best Decision Tree (After Hyperparameter Tuning)")
plt.show()

# Save as image using Graphviz
dot_data = StringIO()
export_graphviz(best_clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True,
                feature_names=feature_cols,
                class_names=['0', '1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png("best_diabetes_tree.png")
print("Best decision tree saved as 'best_diabetes_tree.png'")